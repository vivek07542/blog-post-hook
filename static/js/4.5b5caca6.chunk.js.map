{"version":3,"sources":["components/CreatePost/CreatePost.js","components/SharePost/SharePost.js","UI/ReadMore/ReadMore.js","components/AllPost/AllPost.js","container/Post/Post.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","UI/Button/Button.js","UI/BackDrop/BackDrop.js","UI/Modal/Modal.js","UI/DropDown/DropDown.js","UI/Pagination/Pagination.js"],"names":["CreatePost","props","useState","counter","setCounter","useForm","mode","register","handleSubmit","errors","formState","Modal","show","activePopup","modelClosed","className","id","onSubmit","data","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","saveButtonHandler","post","classNames","placeholder","required","validate","value","count","length","counterHandler","message","type","SharePost","selecteduser","setSelectedUser","shareButton","setShareButton","users","usersDetail","map","user","role","username","selectedPost","onClick","event","userName","target","checked","push","editObjIndex","findIndex","splice","checkBoxHandler","Button","disabled","ReadMore","state","toggleSwitch","readMore","toggleHandler","setState","textRead","this","text","slice","Component","AllPost","currentPage","postPerPage","sortType","checkBox","checkBoxPopUp","dispatch","useDispatch","useSelector","Post","userPost","Login","loggedInUser","createHandler","modelClicked","prevCheckValue","ref","useRef","useEffect","current","usePrevious","window","confirm","postAction","indexOfLastPost","indexOfFirstPost","approvedPost","sort","a","b","date","localeCompare","style","width","tabContent","Pagination","pageSelect","pagePerPost","paginate","pageNumbers","totalPosts","selectedUser","toggleTab","setToggleTab","pendingPostArray","adminPost","toggleTabClick","index","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","allProps","classNameProp","assignedClass","join","children","Backdrop","clicked","nextProps","nextState","transform","opacity","DropDown","options","opt","lastPage","Math","ceil","e","number"],"mappings":"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","file":"static/js/4.5b5caca6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Modal from \"../../UI/Modal/Modal\";\r\nimport classNames from \"classnames\";\r\n\r\nconst CreatePost = (props) =>{\r\n  const[counter,setCounter] = useState(500);\r\n\r\n  const{register,handleSubmit,formState : {errors}} = useForm({mode:\"onChange\"});\r\n  \r\n  const counterHandler = (value)=>{\r\n    const count = value.length\r\n    setCounter(500 -count);\r\n  }\r\n  \r\n  const onSubmit = (data) =>{\r\n    var today = new Date();\r\n\r\n    var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    \r\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    \r\n    var dateTime = date+\" \"+time;\r\n\r\n    props.saveButtonHandler(data.post,dateTime);\r\n    props.modelClosed();\r\n  }\r\n  return(\r\n    <div>\r\n    <Modal\r\n      show={props.activePopup}\r\n      modelClosed={props.modelClosed}\r\n    >\r\n      <div>\r\n        <div className=\"jumbotron text-center my-5\" id=\"myProfileDiv\">\r\n          <h3 className=\"display-4\">Create Post</h3>\r\n          <form onSubmit = {handleSubmit(onSubmit)}>\r\n            <textarea className = {classNames(\"form-control\" , {\"is-invalid\": errors.post})} placeholder = \"...WritePost\" {...register(\"post\",{required : \"Write Some Post\",validate : value => counterHandler(value)})}/>\r\n            {errors.post && <p className = \"invalid-feedback\">{errors.post.message}</p>}\r\n\r\n            <p className=\"text-info\">\r\n              {\" \"}\r\n              You Have{\" \"}\r\n              <span\r\n                className={\r\n                  counter === 0 ? \"text-danger\" : \"text-info\"\r\n                }\r\n              >\r\n                {\" \"}\r\n                {counter}\r\n              </span>\r\n              Character Left..\r\n            </p>\r\n          \r\n          <button className = \"btn btn-outline-info\" type=\"submit\">Save Post</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  </div>\r\n  )\r\n}\r\nexport default CreatePost;\r\n\r\n// export default class CreatePost extends Component {\r\n//   state = {\r\n//     post: { value: \"\",valid: false, touched: false },\r\n//     counter: 500,\r\n//     date : \"\"\r\n//   };\r\n//   handleChange = (key) => (value, error) => {\r\n//     if (this.state.counter !== 0) {\r\n//       this.setState({ [key]: { value: value, valid: !error, touched: true } });\r\n//       const counter = 500 - value.length;\r\n//       this.setState({ counter: counter });\r\n//     }\r\n//   };\r\n//   submitHandler = ()=>{\r\n//     var today = new Date();\r\n\r\n//     var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    \r\n//     var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    \r\n//     var dateTime = date+\" \"+time;\r\n\r\n//     this.setState({date : dateTime},() => {\r\n//         this.props.saveButtonHandler(this.state.post.value,this.state.date);\r\n//         this.props.modelClosed();\r\n//     });\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <Modal\r\n//           show={this.props.activePopup}\r\n//           modelClosed={this.props.modelClosed}\r\n//         >\r\n//           <div>\r\n//             <div className=\"jumbotron text-center my-5\" id=\"myProfileDiv\">\r\n//               <h3 className=\"display-4\">Create Post</h3>\r\n//               <div>\r\n//                 <Input\r\n//                   type=\"textarea\"\r\n//                   placeholder=\"...Write Post\"\r\n//                   value={this.state.post.value}\r\n//                   onChange={this.handleChange(\"post\")}\r\n//                   validators={[\r\n//                     {\r\n//                       check: Validators.required,\r\n//                       message: \"Please Write Post\",\r\n//                     },\r\n//                   ]}\r\n//                   touched={this.state.post.touched}\r\n//                 />\r\n//                 <p className=\"text-info\">\r\n//                   {\" \"}\r\n//                   You Have{\" \"}\r\n//                   <span\r\n//                     className={\r\n//                       this.state.counter === 0 ? \"text-danger\" : \"text-info\"\r\n//                     }\r\n//                   >\r\n//                     {\" \"}\r\n//                     {this.state.counter}\r\n//                   </span>\r\n//                   Character Left..\r\n//                 </p>\r\n//               </div>\r\n//               <Button onClick={this.submitHandler}>Save Post</Button>\r\n//             </div>\r\n//           </div>\r\n//         </Modal>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import React, { Component, useState } from \"react\";\r\nimport Modal from \"../../UI/Modal/Modal\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst SharePost = (props) =>{\r\n  const[selecteduser,setSelectedUser] = useState([]);\r\n  const[shareButton , setShareButton] = useState(false);\r\n\r\n  const checkBoxHandler = (event) =>{\r\n    let userName = [...selecteduser];\r\n    if(event.target.checked){\r\n        userName.push(event.target.value);\r\n    }\r\n    else{\r\n        const editObjIndex = userName.findIndex(user => user === event.target.value);\r\n        userName.splice(editObjIndex, 1);\r\n    }\r\n    if(userName !== null){\r\n      setShareButton(true);\r\n    }\r\n    setSelectedUser(userName);\r\n  }\r\n  const submitHandler = () =>{\r\n    props.saveButtonHandler(selecteduser,props.selectedPost);\r\n    props.modelClosed();\r\n  }\r\n\r\n  const users = props.usersDetail.map((user) => {\r\n    if (user.role !== \"admin\" && user.username !== props.selectedPost.username) {\r\n      return (\r\n        <div key={user.username} className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            onClick = {(event)=>checkBoxHandler(event)}\r\n            value={user.username}\r\n          />\r\n          <label className=\"form-check-label\" >\r\n            {user.username}\r\n          </label>\r\n        </div>\r\n      );\r\n    }\r\n    return false;\r\n  });\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.activePopup}\r\n        modelClosed={props.modelClosed}\r\n      >\r\n        <div>\r\n          <div className=\"jumbotron text-center my-5\" id=\"myProfileDiv\">\r\n            <h4 className=\"display-4\">Share Post</h4>\r\n            <div>{users}</div>\r\n            <Button disabled={!shareButton} className = \"my-2\" onClick={submitHandler}>Share</Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default SharePost;","import React, { Component } from \"react\";\r\n\r\nexport default class ReadMore extends Component {\r\n  state = {\r\n    toggleSwitch: this.props.readMore,\r\n  };\r\n\r\n  toggleHandler = () => {\r\n    this.setState({ toggleSwitch: !this.state.toggleSwitch });\r\n  };\r\n\r\n  render() {\r\n    let textRead = this.state.toggleSwitch ? (\r\n      <p>{this.props.text.slice(0, 200)}</p>\r\n    ) : (\r\n      <p>{this.props.text}</p>\r\n    );\r\n    return (\r\n      <div>\r\n        {textRead}\r\n        <div className=\"row justify-content-end mr-4 \">\r\n          <p\r\n            className=\"nav-link text-info small\"\r\n            onClick={this.toggleHandler}\r\n          >\r\n            {this.state.toggleSwitch ? \"Read More\" : \"Read Less\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {useEffect,useState,useRef } from \"react\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport Pagination from \"../../UI/Pagination/Pagination\";\r\nimport CreatePost from \"../../components/CreatePost/CreatePost\";\r\nimport {useSelector,useDispatch } from \"react-redux\";\r\nimport * as postAction from \"../../store/redux/PostRedux/PostRedux\";\r\nimport SharePost from \"../SharePost/SharePost\";\r\nimport \"./AllPost.css\";\r\nimport ReadMore from \"../../UI/ReadMore/ReadMore\";\r\n\r\nconst AllPost = (props) =>{\r\n\r\n  const[state,setState] = useState({activePopup: false,\r\n    currentPage: 1,\r\n    postPerPage: 5,\r\n    sortType: \"asc\",\r\n    checkBox: false,\r\n    checkBoxPopUp: false,\r\n    selectedPost: {},\r\n    readMore: true})\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const userPost = useSelector(state => state.Post.userPost);\r\n    const usersDetail = useSelector(state => state.Login.usersDetail);\r\n    const loggedInUser = useSelector(state => state.Login.loggedInUser );\r\n\r\n    const createHandler = () => {\r\n      setState({...state, activePopup: true });\r\n    };\r\n    const modelClicked = () => {\r\n      setState({...state, activePopup: false, checkBoxPopUp: false });\r\n    };\r\n  \r\n    const paginate = (pageNumbers) => {\r\n      setState({...state, currentPage: pageNumbers });\r\n    };\r\n    const pageSelect = (pagePerPost) => {\r\n      setState({...state, postPerPage: pagePerPost });\r\n    };\r\n  \r\n    const onSort = () => {\r\n      state.sortType === \"asc\"\r\n        ? setState({...state, sortType: \"desc\" })\r\n        : setState({...state, sortType: \"asc\" });\r\n    };\r\n\r\n    const prevCheckValue = usePrevious(state.checkBox);\r\n    \r\n    function usePrevious(value) {\r\n      const ref = useRef();\r\n      useEffect(() => {\r\n        ref.current = value;\r\n      });\r\n      return ref.current;\r\n    }\r\n\r\n    useEffect(() => {\r\n      if(!prevCheckValue && state.checkBox){\r\n        let adminDecision = window.confirm(\r\n          \"Do you want to allow this post to be visible to other users?\"\r\n        );\r\n        if(adminDecision){\r\n          setState({...state,\r\n            checkBoxPopUp: true,\r\n            checkBox : false\r\n          });\r\n        }\r\n        else{\r\n          dispatch(postAction.shareHandlerInit([], state.selectedPost));\r\n          setState({...state,checkBox : false})\r\n        }\r\n      }\r\n    }, [state.checkBox,state.selectedPost])\r\n\r\n    const   checkBoxHandler = (event, post, username) => {\r\n      setState({...state, checkBox: true ,selectedPost : {post: post, username: username}});\r\n    };\r\n    const indexOfLastPost = state.currentPage * state.postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - state.postPerPage;\r\n    const currentPosts = props.approvedPost.slice(\r\n      indexOfFirstPost,\r\n      indexOfLastPost\r\n    );\r\n    const sortedArray = currentPosts.sort((a, b) => {\r\n      const isReversed = state.sortType === \"asc\" ? 1 : -1;\r\n      return isReversed * a.date.localeCompare(b.date);\r\n    });\r\n\r\n    const approvedPost = sortedArray.map((post) => {\r\n      return (\r\n        <div\r\n          className=\"card m-3 mx-auto cardBox\"\r\n          style={{ width: \"45rem\" }}\r\n          key={post.date}\r\n        >\r\n          <div className=\"postBox\">\r\n            <ReadMore text={post.post} readMore={state.readMore} />\r\n          </div>\r\n          <div className=\"row justify-content-between\">\r\n            {loggedInUser.role === \"admin\" &&\r\n              props.tabContent === \"pendingPost\" && (\r\n                <div className=\"col-2\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    value={state.checkBox}\r\n                    \r\n                    onClick={(event) =>\r\n                          checkBoxHandler(event, post.post, post.username)\r\n                    }\r\n                  />\r\n                </div>\r\n              )}\r\n            <div className=\"col-5\">\r\n              <small>{post.username}</small>\r\n            </div>\r\n            <div className=\"col-5\">\r\n              <small>{post.date}</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n    return(\r\n      <div>\r\n      <div>\r\n        {loggedInUser.role !== \"admin\" &&\r\n        (props.tabContent === \"allPost\" ||\r\n          props.tabContent === \"pendingPost\") ? (\r\n          <Button className=\"float-right\" onClick={createHandler}>\r\n            Create Post\r\n          </Button>\r\n        ) : (\r\n          props.tabContent === \"promotionalPost\" && (\r\n            <Button className=\"float-right\" onClick={createHandler}>\r\n              Create Post\r\n            </Button>\r\n          )\r\n        )}\r\n      </div>\r\n      <div className=\"row\">\r\n        <Button className=\"btn-sm float-right\" onClick={() => onSort()}>\r\n          Sort Date\r\n        </Button>\r\n      </div>\r\n      <div className=\"\">{approvedPost}</div>\r\n      <Pagination\r\n        pageSelect={pageSelect}\r\n        paginate={paginate}\r\n        currentPage={state.currentPage}\r\n        postPerPage={state.postPerPage}\r\n        totalPosts={props.approvedPost.length}\r\n      />\r\n      {state.activePopup && (\r\n        <CreatePost\r\n          activePopup={state.activePopup}\r\n          saveButtonHandler={ (post,date)=> dispatch(postAction.saveHandlerInit(post, date))}\r\n          modelClosed={modelClicked}\r\n        />\r\n      )}\r\n      {state.checkBoxPopUp && (\r\n        <SharePost\r\n          loggedInUser={loggedInUser}\r\n          selectedPost={state.selectedPost}\r\n          usersDetail={usersDetail}\r\n          activePopup={state.checkBoxPopUp}\r\n          modelClosed={modelClicked}\r\n          saveButtonHandler={(selectedUser, selectedPost)=>dispatch(postAction.shareHandlerInit(selectedUser, selectedPost))}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllPost;\r\n\r\n// class AllPost extends Component {\r\n//   state = {\r\n//     activePopup: false,\r\n//     currentPage: 1,\r\n//     postPerPage: 5,\r\n//     sortType: \"asc\",\r\n//     checkBox: false,\r\n//     checkBoxPopUp: false,\r\n//     selectedPost: {},\r\n//     readMore: true,\r\n//   };\r\n\r\n//   createHandler = () => {\r\n//     this.setState({ activePopup: true });\r\n//   };\r\n//   modelClicked = () => {\r\n//     this.setState({ activePopup: false, checkBoxPopUp: false });\r\n//   };\r\n\r\n//   paginate = (pageNumbers) => {\r\n//     this.setState({ currentPage: pageNumbers });\r\n//   };\r\n//   pageSelect = (pagePerPost) => {\r\n//     this.setState({ postPerPage: pagePerPost });\r\n//   };\r\n\r\n//   onSort = () => {\r\n//     this.state.sortType === \"asc\"\r\n//       ? this.setState({ sortType: \"desc\" })\r\n//       : this.setState({ sortType: \"asc\" });\r\n//   };\r\n\r\n//   checkBoxHandler = (event, post, username) => {\r\n//     this.setState({ checkBox: true }, () => {\r\n//       if (this.state.checkBox) {\r\n//         let adminDecision = window.confirm(\r\n//           \"Do you want to allow this post to be visible to other users?\"\r\n//         );\r\n//         if (adminDecision) {\r\n//           this.setState({\r\n//             checkBoxPopUp: true,\r\n//             selectedPost: { post: post, username: username },\r\n//           });\r\n//         } else {\r\n//           this.setState(\r\n//             { selectedPost: { post: post, username: username } },\r\n//             () => {\r\n//               this.props.onSharedHandler([], this.state.selectedPost);\r\n//             }\r\n//           );\r\n//         }\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     const indexOfLastPost = this.state.currentPage * this.state.postPerPage;\r\n//     const indexOfFirstPost = indexOfLastPost - this.state.postPerPage;\r\n//     const currentPosts = this.props.approvedPost.slice(\r\n//       indexOfFirstPost,\r\n//       indexOfLastPost\r\n//     );\r\n//     const sortedArray = currentPosts.sort((a, b) => {\r\n//       const isReversed = this.state.sortType === \"asc\" ? 1 : -1;\r\n//       return isReversed * a.date.localeCompare(b.date);\r\n//     });\r\n//     // let textRead;\r\n//     const approvedPost = sortedArray.map((post) => {\r\n//       return (\r\n//         <div\r\n//           className=\"card m-3 mx-auto cardBox\"\r\n//           style={{ width: \"45rem\" }}\r\n//           key={post.date}\r\n//         >\r\n//           <div className=\"postBox\">\r\n//             <ReadMore text={post.post} readMore={this.state.readMore} />\r\n//           </div>\r\n//           <div className=\"row justify-content-between\">\r\n//             {this.props.loggedInUser.role === \"admin\" &&\r\n//               this.props.tabContent === \"pendingPost\" && (\r\n//                 <div className=\"col-2\">\r\n//                   <input\r\n//                     className=\"form-check-input\"\r\n//                     type=\"checkbox\"\r\n//                     value={this.state.checkBox}\r\n//                     onClick={(event) =>\r\n//                       this.checkBoxHandler(event, post.post, post.username)\r\n//                     }\r\n//                   />\r\n//                 </div>\r\n//               )}\r\n//             <div className=\"col-5\">\r\n//               <small>{post.username}</small>\r\n//             </div>\r\n//             <div className=\"col-5\">\r\n//               <small>{post.date}</small>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     });\r\n\r\n//     return (\r\n//       <div>\r\n//         <div>\r\n//           {this.props.loggedInUser.role !== \"admin\" &&\r\n//           (this.props.tabContent === \"allPost\" ||\r\n//             this.props.tabContent === \"pendingPost\") ? (\r\n//             <Button className=\"float-right\" onClick={this.createHandler}>\r\n//               Create Post\r\n//             </Button>\r\n//           ) : (\r\n//             this.props.tabContent === \"promotionalPost\" && (\r\n//               <Button className=\"float-right\" onClick={this.createHandler}>\r\n//                 Create Post\r\n//               </Button>\r\n//             )\r\n//           )}\r\n//         </div>\r\n//         <div className=\"row\">\r\n//           <Button className=\"btn-sm float-right\" onClick={() => this.onSort()}>\r\n//             Sort Date\r\n//           </Button>\r\n//         </div>\r\n//         <div className=\"\">{approvedPost}</div>\r\n//         <Pagination\r\n//           pageSelect={this.pageSelect}\r\n//           paginate={this.paginate}\r\n//           currentPage={this.state.currentPage}\r\n//           postPerPage={this.state.postPerPage}\r\n//           totalPosts={this.props.approvedPost.length}\r\n//         />\r\n//         {this.state.activePopup && (\r\n//           <CreatePost\r\n//             activePopup={this.state.activePopup}\r\n//             saveButtonHandler={this.props.onSaveButtonHandler}\r\n//             modelClosed={this.modelClicked}\r\n//           />\r\n//         )}\r\n//         {this.state.checkBoxPopUp && (\r\n//           <SharePost\r\n//             loggedInUser={this.props.loggedInUser}\r\n//             selectedPost={this.state.selectedPost}\r\n//             usersDetail={this.props.usersDetail}\r\n//             activePopup={this.state.checkBoxPopUp}\r\n//             modelClosed={this.modelClicked}\r\n//             saveButtonHandler={this.props.onSharedHandler}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     userPost: state.Post.userPost,\r\n//     usersDetail: state.Login.usersDetail,\r\n//     loggedInUser: state.Login.loggedInUser,\r\n//   };\r\n// };\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     onSaveButtonHandler: (post, date) => {\r\n//       dispatch(postAction.saveHandlerInit(post, date));\r\n//     },\r\n//     onSharedHandler: (selectedUser, selectedPost) => {\r\n//       dispatch(postAction.shareHandlerInit(selectedUser, selectedPost));\r\n//     },\r\n//   };\r\n// };\r\n// export default connect(mapStateToProps, mapDispatchToProps)(AllPost);","import React, { useState,useEffect } from \"react\";\r\nimport \"./Post.css\";\r\nimport AllPost from \"../../components/AllPost/AllPost\";\r\nimport \"../../App.css\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport * as postAction from \"../../store/redux/PostRedux/PostRedux\";\r\n\r\nconst Post = () =>{\r\n  const[toggleTab,setToggleTab] = useState(2);\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const loggedInUser = useSelector(state => state.Login.loggedInUser);\r\n  const userPost= useSelector(state => state.Post.userPost);\r\n  const pendingPostArray = useSelector(state => state.Post.pendingPostArray);\r\n  const approvedPost = useSelector(state => state.Post.approvedPost);\r\n  const adminPost = useSelector(state => state.Post.adminPost);\r\n\r\n  const toggleTabClick = (index) => {\r\n    setToggleTab(index);\r\n    dispatch(postAction.postClickInit(userPost));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(postAction.initializePostInit());\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    dispatch(postAction.postClickInit(userPost));\r\n  },[userPost])\r\n\r\n  return(\r\n    <div className=\"tabDiv\">\r\n    <div className=\"bloc-tabs\">\r\n      <button\r\n        className={toggleTab === 1 ? \"tabs active-tabs\" : \"tabs\"}\r\n        onClick={() => toggleTabClick(1)}\r\n      >\r\n        Pending Post\r\n      </button>\r\n      <button\r\n        className={toggleTab === 2 ? \"tabs active-tabs\" : \"tabs\"}\r\n        onClick={() => toggleTabClick(2)}\r\n      >\r\n        All Post\r\n      </button>\r\n      {loggedInUser.role === \"admin\" && (\r\n        <button\r\n          className={\r\n            toggleTab === 3 ? \"tabs active-tabs\" : \"tabs\"\r\n          }\r\n          onClick={() => toggleTabClick(3)}\r\n        >\r\n          Promotional Post\r\n        </button>\r\n      )}\r\n    </div>\r\n\r\n    <div className=\"content-tabs\">\r\n      <div\r\n        className={\r\n          toggleTab === 1 ? \"content  active-content\" : \"content\"\r\n        }\r\n      >\r\n        <div className=\"container\">\r\n          <h4 className=\"display-3 text-center heading\">Pending Post</h4>\r\n          <hr />\r\n          <AllPost\r\n            loggedInUser={loggedInUser}\r\n            approvedPost={pendingPostArray}\r\n            tabContent = \"pendingPost\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          toggleTab === 2 ? \"content  active-content\" : \"content\"\r\n        }\r\n      >\r\n        <div className=\"container\">\r\n          <h4 className=\"display-3 text-center heading\">All Post</h4>\r\n          <hr />\r\n          <AllPost\r\n            loggedInUser={loggedInUser}\r\n            approvedPost={approvedPost}\r\n            tabContent = \"allPost\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className={\r\n          toggleTab === 3 ? \"content  active-content\" : \"content\"\r\n        }\r\n      >\r\n        <div className=\"container\">\r\n          <h4 className=\"display-3 text-center heading\">Promotional Post</h4>\r\n          <hr />\r\n          <AllPost\r\n            loggedInUser={loggedInUser}\r\n            approvedPost={adminPost}\r\n            tabContent = \"promotionalPost\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\nexport default Post;","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = (props) => {\r\n  const { className, ...allProps } = { ...props };\r\n  \r\n  let classNameProp = [\"btn btn-outline-info\"];\r\n  if (className) {\r\n    classNameProp.push(className);\r\n  }\r\n  let assignedClass = classNameProp.join(\" \");\r\n  return (  \r\n      <button className={assignedClass} {...allProps}>\r\n        {props.children}\r\n      </button>   \r\n  );\r\n};\r\nButton.propTypes = {\r\n  className : PropTypes.string,\r\n  onClick : PropTypes.func  \r\n}\r\nexport default Button;","import React from 'react'\r\nimport \"./BackDrop.css\";\r\n\r\nconst Backdrop = (props) => (\r\n    props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null\r\n\r\n)\r\n  \r\n\r\n\r\nexport default Backdrop\r\n","import React, { Component } from 'react';\r\nimport \"./Modal.css\";\r\n// import Aux from \"../../../hoc/Auxilary\";\r\nimport Backdrop from \"../BackDrop/BackDrop\";\r\nclass Modal extends Component{\r\n    shouldComponentUpdate(nextProps,nextState){\r\n       return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n    }  \r\n    render(){\r\n        return (\r\n            <>\r\n            <Backdrop show={this.props.show} clicked={this.props.modelClosed}/>\r\n            <div className=\"Modal\"\r\n            style={{\r\n                transform:this.props.show ? \"translateY(0)\" : \"translateY(-100vh)\",\r\n                opacity: this.props.show ? \"1\" : \"0\"\r\n            }}>\r\n                {this.props.children}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal\r\n","import React, { Component } from 'react'\r\n\r\nexport default class DropDown extends Component {\r\n    render() {\r\n        let options = this.props.options.map(opt =>(\r\n            <option key = {opt} value = {opt}>{opt}</option>\r\n        ));\r\n        return (\r\n            <>\r\n              <select className = \"form-control\" {...this.props}>\r\n                  {options}\r\n              </select>  \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"../Button/Button\";\r\nimport DropDown from \"../DropDown/DropDown\";\r\n\r\nconst Pagination = ({\r\n  postPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  currentPage,\r\n  pageSelect,\r\n}) => {\r\n\r\n  const pageNumbers = [];\r\n  const lastPage = Math.ceil(totalPosts / postPerPage);\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"form-inline float-right\">\r\n        <DropDown  onClick={(e) => pageSelect(e.target.value)} options = {[5,10,20] }></DropDown>\r\n        <Button\r\n          onClick={() => paginate(1)}\r\n          disabled={currentPage === 1 ? true : false}\r\n        >\r\n          First Page\r\n        </Button>\r\n        <Button\r\n          onClick={() => paginate(currentPage + 1)}\r\n          disabled={currentPage === lastPage ? true : false}\r\n        >\r\n          Next Page\r\n        </Button>\r\n        {pageNumbers.map((number) => (\r\n          <div key={number} className=\"mx-1\">\r\n            <Button onClick={() => paginate(number)}>{number}</Button>\r\n          </div>\r\n        ))}\r\n        <Button\r\n          onClick={() => paginate(currentPage - 1)}\r\n          disabled={currentPage === 1 ? true : false}\r\n        >\r\n          Prev. Page\r\n        </Button>\r\n        <Button\r\n          onClick={() => paginate(Math.ceil(totalPosts / postPerPage))}\r\n          disabled={currentPage === lastPage ? true : false}\r\n        >\r\n          Last Page\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;"],"sourceRoot":""}